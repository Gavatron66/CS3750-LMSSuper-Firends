using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using Assignment1v3.Data;
using Assignment1v3.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Authentication;
using System.Security.Claims;
using System.Text.RegularExpressions;
using NuGet.Packaging;
using Microsoft.Extensions.Caching.Memory;

namespace Assignment1v3.Pages.Home
{
    [Authorize(Policy = "MustBeInstructor")]
    public class InstructorDashboardModel : PageModel
    {
        private readonly Assignment1v3Context _context;
        private readonly IMemoryCache _cache;

        public InstructorDashboardModel(Assignment1v3Context context, IMemoryCache cache)
        {
            _context = context;
            _cache = cache;
        }

        public IList<Course> Course { get; set; }
        public List<Submission> TO_DO { get; set; }

        public async Task OnGetAsync()
        {
            Course = new List<Course>();
            TO_DO = new List<Submission>();

            var userEmailClaim = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email);

            if (userEmailClaim != null)
            {
                var userEmail = userEmailClaim.Value;

                // Check if courses are already in cache
                if (!_cache.TryGetValue("InstructorCourses_" + userEmail, out IList<Course> instructorCourses))
                {
                    // If not in cache, query from the database and store in cache
                    var user = await _context.Login
                        .FirstOrDefaultAsync(u => u.Email_Username == userEmail);

                    if (user != null)
                    {
                        var userId = user.Id;

                        instructorCourses = await _context.Course
                            .Where(c => c.InstructorId == userId)
                            .ToListAsync();

                        // Store courses in cache with a specific key
                        _cache.Set("InstructorCourses_" + userEmail, instructorCourses, TimeSpan.FromMinutes(10)); // Adjust the cache duration as needed
                    }
                }

                Course.AddRange(instructorCourses);

                // Check if submissions are already in cache
                if (!_cache.TryGetValue("ToDoSubmissions_" + userEmail, out List<Submission> toDoSubmissions))
                {
                    toDoSubmissions = new List<Submission>();

                    foreach (var tempcourse in instructorCourses)
                    {
                        var matchingSubmissions = await (
                            from submission in _context.Submission
                            join assignment in _context.Assignment on submission.AssignmentID equals assignment.ID
                            join course in _context.Course on assignment.course equals course.Id
                            join login in _context.Login on submission.UserID equals login.Id
                            where assignment.course == tempcourse.Id &&
                                  assignment.startDate <= DateTime.Now &&
                                  submission.Graded == false
                            select new Submission
                            {
                                AssignmentID = submission.AssignmentID,
                                UserID = submission.UserID,
                                maxPoints = submission.maxPoints,
                                submissionType = submission.submissionType,
                                ID = submission.ID,
                                TextBox = course.CourseNumber.ToString() + "-" + course.CourseName.ToString(),
                                Upload = login.Name_First.ToString() + " " + login.Name_Last.ToString() + " - " + assignment.name.ToString()
                            }).ToListAsync();

                        toDoSubmissions.AddRange(matchingSubmissions);
                    }

                    // Order submissions by TextBox
                    toDoSubmissions = toDoSubmissions.OrderBy(x => x.TextBox).ToList();

                    // Store submissions in cache with a specific key
                    _cache.Set("ToDoSubmissions_" + userEmail, toDoSubmissions, TimeSpan.FromMinutes(10)); // Adjust the cache duration as needed
                }

                TO_DO = toDoSubmissions;
            }
        }
    }
}
